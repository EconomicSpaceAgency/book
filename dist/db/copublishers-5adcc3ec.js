import{i as s}from"./supabase-bcc39e3c.js";const n=s();async function i(r,e){try{if(!r||typeof r!="string")throw new Error("Invalid wallet value");const{data:o,error:t}=await n.from("copublishers").insert([{wallet:r,token_id:e}]);if(t)throw t;return o}catch(o){return console.error("Error inserting co-publisher:",o),!1}}async function l(r){try{if(!r||typeof r!="string")throw new Error("Invalid wallet value");const{data:e,error:o}=await n.from("copublishers").select("*").eq("wallet",r);if(o)throw o;return e?e[0]:null}catch(e){return console.error("Error getting co-publisher by wallet:",e),null}}async function u(r,e){try{if(!r||typeof r!="string"||!e||typeof e!="string")throw new Error("Invalid wallet or name value");const{data:o,error:t}=await n.from("copublishers").select("*").eq("wallet",r).eq("name",e);if(t)throw t;return o?o[0]:null}catch(o){return console.error("Error getting co-publisher by wallet and name:",o),null}}async function c(){try{const{data:r,error:e}=await n.from("copublishers").select("*");if(e)throw e;return r||[]}catch(r){return console.error("Error getting all co-publishers:",r),[]}}async function h(r,e){try{if(!r||typeof r!="string")throw new Error("Invalid wallet value");if(!e||typeof e!="string")throw new Error("Invalid name value");const{data:o,error:t}=await n.from("copublishers").update({name:e}).eq("wallet",r);if(t)throw t;return console.log("updated copublisher successfully",o),o?o[0]:null}catch(o){return console.error("Error updating co-publisher:",o),null}}export{u as a,l as b,c as g,i,h as u};
