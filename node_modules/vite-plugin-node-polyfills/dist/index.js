import { readFileSync as v } from "node:fs";
import { createRequire as B } from "node:module";
import y from "@rollup/plugin-inject";
import x from "node-stdlib-browser";
import { handleCircularDependancyWarning as P } from "node-stdlib-browser/helpers/rollup/plugin";
import S from "node-stdlib-browser/helpers/esbuild/plugin";
const a = (e) => e ? e === !0 ? !0 : e === "build" : !1, u = (e) => e ? e === !0 ? !0 : e === "dev" : !1, $ = (e) => e.startsWith("node:"), I = (e = {}) => {
  const f = B(import.meta.url), n = f.resolve("vite-plugin-node-polyfills/shims"), g = f.resolve("vite-plugin-node-polyfills/shims/banner"), c = v(g, "utf-8"), r = {
    include: [],
    exclude: [],
    protocolImports: !0,
    ...e,
    globals: {
      Buffer: !0,
      global: !0,
      process: !0,
      ...e.globals
    }
  }, b = (o, l) => o === l || o === `node:${l}`, m = (o) => r.include.length ? !r.include.some((l) => b(o, l)) : r.exclude.some((l) => b(o, l)), h = (o) => {
    if (u(r.globals.Buffer) && /^(?:node:)?buffer$/.test(o))
      return f.resolve("buffer-polyfill");
  };
  return {
    name: "vite-plugin-node-polyfills",
    config: (o, l) => {
      const i = l.mode === "development", d = Object.entries(x).reduce((t, [s, p]) => (!r.protocolImports && $(s) || m(s) || (t[s] = h(s) || p), t), {});
      return {
        build: {
          rollupOptions: {
            onwarn: (t, s) => {
              P(t, s);
            },
            plugins: [
              {
                ...y({
                  // https://github.com/niksy/node-stdlib-browser/blob/3e7cd7f3d115ac5c4593b550e7d8c4a82a0d4ac4/README.md#vite
                  ...a(r.globals.Buffer) ? { Buffer: [n, "Buffer"] } : {},
                  ...a(r.globals.global) ? { global: [n, "global"] } : {},
                  ...a(r.globals.process) ? { process: [n, "process"] } : {}
                })
              }
            ]
          }
        },
        esbuild: {
          // In dev, the global polyfills need to be injected as a banner in order for isolated scripts (such as Vue SFCs) to have access to them.
          banner: i ? c : void 0
        },
        optimizeDeps: {
          esbuildOptions: {
            banner: i ? { js: c } : void 0,
            // https://github.com/niksy/node-stdlib-browser/blob/3e7cd7f3d115ac5c4593b550e7d8c4a82a0d4ac4/README.md?plain=1#L203-L209
            define: {
              ...i && u(r.globals.Buffer) ? { Buffer: "Buffer" } : {},
              ...i && u(r.globals.global) ? { global: "global" } : {},
              ...i && u(r.globals.process) ? { process: "process" } : {}
            },
            inject: [
              n
            ],
            plugins: [
              S(d),
              // Supress the 'injected path "..." cannot be marked as external' error in Vite 4 (emitted by esbuild).
              // https://github.com/evanw/esbuild/blob/edede3c49ad6adddc6ea5b3c78c6ea7507e03020/internal/bundler/bundler.go#L1469
              {
                name: "vite-plugin-node-polyfills-shims-resolver",
                setup(t) {
                  const s = n.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"), p = new RegExp(`^${s}$`);
                  t.onResolve({ filter: p }, () => ({
                    // https://github.com/evanw/esbuild/blob/edede3c49ad6adddc6ea5b3c78c6ea7507e03020/internal/bundler/bundler.go#L1468
                    external: !1,
                    path: n
                  }));
                }
              }
            ]
          }
        },
        resolve: {
          // https://github.com/niksy/node-stdlib-browser/blob/3e7cd7f3d115ac5c4593b550e7d8c4a82a0d4ac4/README.md?plain=1#L150
          alias: {
            ...d
          }
        }
      };
    }
  };
};
export {
  I as nodePolyfills
};
//# sourceMappingURL=index.js.map
